------------------------------------------------------------------------------------
<head>
<link rel="stylesheet" href="css/estilo.css“ type=“text/css”>
</head>
------------------------------------------------------------------------------------
display: flex o display: inline-flex: Estas propiedades se utilizan para convertir un elemento en un contenedor flex o un contenedor flex en línea.

flex-direction: Define la dirección en la que se colocan los elementos flexibles en el contenedor. Puede tomar valores como row, column, row-reverse o column-reverse.

justify-content: Controla la alineación de los elementos flexibles en el eje principal del contenedor. Las opciones incluyen flex-start, flex-end, center, space-between y space-around, entre otras.

center
alinea los elementos flexibles en el centro del contenedor
flex-start
alinea los elementos flexibles al comienzo del contenedor (esto es
predeterminado)
flex-end
 alinea los elementos flexibles al final del contenedor
space-around
muestra los elementos flexibles con espacio antes, entre y después de las
líneas
space-between
muestra los elementos flexibles con espacio entre líneas

align-items: Define cómo se alinean los elementos flexibles en el eje cruzado del contenedor. Las opciones comunes son stretch, flex-start, flex-end, center y baseline.

align-self: Permite controlar la alineación de un elemento flexible específico en el eje cruzado, anulando align-items para ese elemento.
center
alinea los elementos flexibles en el medio del contenedor
flex-start
alinea los elementos flexibles en la parte superior del contenedor
flex-end
alinea los elementos flexibles en la parte inferior del contenedor
stretch
estira los elementos flexibles para llenar el contenedor (esto es
predeterminado)
baseline
alinea los elementos flexibles como se alinean sus líneas base

flex-grow: Determina cómo se distribuye el espacio adicional entre los elementos flexibles. Un valor mayor asigna más espacio.

flex-shrink: Controla cómo los elementos flexibles se encogen cuando hay espacio limitado en el contenedor. Un valor mayor hace que el elemento se encoja más.

flex-basis: Define el tamaño inicial de un elemento flexible antes de que se distribuya el espacio adicional.

flex: Una propiedad abreviada que combina flex-grow, flex-shrink y flex-basis en una sola declaración.

order: Permite cambiar el orden de visualización de los elementos flexibles sin modificar la estructura HTML.

align-content: Controla el espaciado entre las filas de elementos flexibles cuando hay espacio adicional en el contenedor.

space-between
muestra las líneas flexibles
con el mismo espacio entre ellas
space-around
muestra las líneas flexibles
con espacio antes, entre y
después de ellas
stretch
estira las líneas flexibles
para ocupar el espacio restante
(esto es predeterminado)
center
en el medio del contenedor
flex-start
al comienzo del contenedor
flex-end
al final del contenedor

flex-wrap: Define si los elementos flexibles deben envolverse en múltiples líneas o si deben permanecer en una sola línea. wrap/nowrap/wrap reverse

Estas son algunas de las propiedades más utilizadas en Flexbox, y son fundamentales para crear diseños flexibles y responsivos en tus páginas web. La combinación y el uso adecuado de estas propiedades te permitirán crear diseños web complejos y adaptables con facilidad.
------------------------------------------------------------------------------------
body{
  margin: 0;
}
.header {
    background-color: #fc6722;
    color: #fff;
    padding: 20px;
    text-align: center;
  }
  .header h1 {
    margin: 0;
  }
  .nav ul {
    list-style: none;
    margin: 0;
    background-color: #20c9cf;
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }
  .nav li {
    margin: 15px;
  }
  .nav a {
    text-decoration: none;
    color: #fff;
    padding: 16px; 
    transition: background-color 0.3s; 
  }
  .main {
    display: flex;
    padding: 10px;
    background-color: rgb(128, 128, 128);
  }
  .section {
    flex-basis: calc(33.33% - 20px);
    background-color: #f8ce44;
    margin-right: 1px;
  }
  .aside {
    flex-basis: calc(66.66% - 20px);
    background-color: #ff37c3;
    padding: 20px;
  }
  .row {
    display: flex;
    flex-wrap: wrap;
  }
  .column {
    flex-basis: calc(33.33% - 20px);
    margin: 5px;
  }
  .column img {
    width: 100%;
    height: auto;
  }
  .footer {
    background-color: #48eb1f;
    color: #fff;
    text-align: center;
    padding: 10px;
  }
  .article {
    margin-bottom: 20px;
    padding: 10px;
    background-color: #f9f9f9;
  }
  .article h2 {
    margin-top: 0;
  }
  .article p {
    margin-bottom: 0;
  }
  .nav a:hover {
    background-color: #148488;
  }
  @media (min-width: 701px) and (max-width: 1000px) {
    .column {
      flex-basis: calc(50% - 10px);
    }
  }
  @media (max-width: 700px) {
    .column {
      flex-basis: 100%;
      margin: 5px 0;
    }
    .nav ul {
      flex-direction: column;
      align-items: center;
    }
    .nav li {
      margin: 5px;
      margin-right: 30px;
    }
  }
------------------------------------------------------------------------------------
.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: footer; }

display: grid: Esta propiedad se utiliza para convertir un elemento en un contenedor de cuadrícula. Los elementos secundarios de este contenedor se comportarán como elementos de cuadrícula.

grid-template-columns y grid-template-rows: Estas propiedades definen el tamaño y la disposición de las columnas y filas en la cuadrícula. Puedes especificar tamaños absolutos, fracciones o contenido mínimo para cada fila o columna.

grid-template-areas: Permite definir un diseño de cuadrícula asignando nombres a áreas específicas de la cuadrícula y organizando los elementos secundarios dentro de esas áreas.

grid-gap o sus variantes grid-row-gap y grid-column-gap: Estas propiedades controlan el espacio entre las filas y las columnas de la cuadrícula.

grid-auto-columns y grid-auto-rows: Definen el tamaño predeterminado para las filas y columnas creadas automáticamente cuando no se especifica una plantilla explícita.

grid-auto-flow: Esta propiedad determina cómo se colocan automáticamente las celdas en la cuadrícula. Puede ser row, column, row dense, column dense u otros valores.

grid-column y grid-row: Estas propiedades permiten colocar elementos secundarios en ubicaciones específicas dentro de la cuadrícula.

grid-area: Facilita la asignación de elementos secundarios a áreas definidas con grid-template-areas.

justify-items y align-items: Controlan la alineación horizontal y vertical de los elementos secundarios dentro de las celdas de la cuadrícula.
○ space-evenly
○ space-around
○ space-between
○ center
○ start
○ end

justify-self y align-self: Permiten la alineación individual de elementos secundarios en una celda específica, anulando justify-items y align-items.

grid-template: Esta propiedad abreviada combina grid-template-rows y grid-template-columns, lo que hace que la definición de la cuadrícula sea más concisa.

place-items y place-content: Son propiedades abreviadas que combinan alineación y justificación tanto en el eje horizontal como en el vertical.

CSS Grid es una tecnología poderosa para crear diseños de página web altamente personalizables y estructurados. Al igual que con Flexbox, la elección y combinación adecuada de estas propiedades te permitirán diseñar páginas web de manera eficiente y versátil.

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ametz</title>
    <link rel="stylesheet" type="text/css" href="css/css.css">
</head>
<body>
    <div class="container">
        <header>
            <div class="titulo">
                <h1>ZUBIRI MANTEO</h1>
            </div>
            <div class="logo">
                <img src="zubiri.png" alt="Logo">
            </div>
        </header>
        <nav>
            <ul>
                <li><a href="#">INICIO</a></li>
                <li><a href="#">QUIENES</a></li>
                <li><a href="#">CURSOR</a></li>
                <li><a href="#">SITUACION</a></li>
                <li><a href="#">CONTACTO</a></li>
            </ul>
        </nav>
        <section>
            <article>
                <h2>INICIO</h2>
                <div class="foto">
                    <img src="zubiri.png" alt="Logo">
                </div>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
            </article>
            <aside>
                <h2>NOTICIAS</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
                <h2>VIDEO</h2>
                <iframe width="300" height="200" src="https://www.youtube.com/embed/HsoEzanKVBc?si=k7hHHwpZhPFHcFGe" title="video" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
            </aside>
        </section>
        <footer>
            <p>ZUBIRI MANTEO</p>
        </footer>
    </div>
</body>
</html>

body {
    background-color: #fff;
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}
.container {
    max-width: 800px;
    margin: 0 auto;
    background-color: #f2f2f2;
    border: 1px solid #000000;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto auto 1fr auto;
    grid-template-areas:
        "header"
        "nav"
        "main"
        "footer";
}
header {
    text-align: center;
    border: 1px solid #000000;
    margin-top: 20px;
    padding: 20px;
    display: grid;
    grid-template-columns: 1fr 100px;
    align-items: center;
}
.titulo {
    font-size: 25px;
}
.logo {
    text-align: right;
}
.logo img {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    box-shadow: 4px 4px 6px rgba(0, 0, 0, 0.8);
}
nav {
    text-align: center;
    border: 1px solid #000000;
    grid-area: nav;
}
nav ul {
    list-style-type: none;
    padding: 0;
}
nav li {
    display: inline;
    margin-right: 20px;
    border: 1px solid #000000;
    padding: 5px 10px;
}
nav li:hover {
    background-color: #ce421f;
}
section {
    border: 1px solid #000000;
    overflow: hidden;
    grid-area: main;
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 10px;
}
article {
    border: 1px solid #000000;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}
.foto img {
    width: 110px;
    height: 120px;
    margin: 0 auto;
    display: block;
}

article h2 {
    text-align: center;
}
article p {
    text-align: left;
}
aside {
    border: 1px solid #000000;
}

aside h2 {
    text-align: center;
}

aside iframe {
    margin-left: 8px;
}
footer {
    clear: both;
    text-align: center;
    border: 1px solid #000000;
    grid-area: footer;
    padding: 10px;
}
